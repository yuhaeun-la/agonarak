generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Club {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  books       Book[]
  genres      Genre[]
  meetings    Meeting[]
  members     Member[]
}

model Member {
  id           String        @id @default(cuid())
  nickname     String
  contact      String?
  isActive     Boolean       @default(true)
  clubId       String
  role         MemberRole    @default(MEMBER)
  attendances  Attendance[]
  books        Book[]
  club         Club          @relation(fields: [clubId], references: [id], onDelete: Cascade)
  readingNotes ReadingNote[]

  @@unique([nickname, clubId])
}

model Meeting {
  id          String        @id @default(cuid())
  title       String
  date        DateTime
  location    String?
  memo        String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  clubId      String
  attendances Attendance[]
  club        Club          @relation(fields: [clubId], references: [id], onDelete: Cascade)
  books       MeetingBook[]
}

model Book {
  id             String        @id @default(cuid())
  title          String
  author         String
  notes          String?
  registeredDate DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  clubId         String
  addedById      String?
  addedBy        Member?       @relation(fields: [addedById], references: [id])
  club           Club          @relation(fields: [clubId], references: [id], onDelete: Cascade)
  genres         BookGenre[]
  meetingBooks   MeetingBook[]
  readingNotes   ReadingNote[]
}

model MeetingBook {
  id        String   @id @default(cuid())
  meetingId String
  bookId    String
  createdAt DateTime @default(now())
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  meeting   Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@unique([meetingId, bookId])
}

model Genre {
  id          String      @id @default(cuid())
  name        String
  description String?
  color       String?     @default("#6B7280")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  clubId      String
  bookGenres  BookGenre[]
  club        Club        @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@unique([name, clubId])
}

model BookGenre {
  id      String @id @default(cuid())
  bookId  String
  genreId String
  book    Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@unique([bookId, genreId])
}

model Attendance {
  id        String           @id @default(cuid())
  status    AttendanceStatus @default(UNDECIDED)
  note      String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  meetingId String
  memberId  String
  meeting   Meeting          @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  member    Member           @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([meetingId, memberId])
}

model ReadingNote {
  id          String   @id @default(cuid())
  content     String
  rating      Int?     @default(0)
  isPublic    Boolean  @default(true)
  attachments String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookId      String
  memberId    String
  book        Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  member      Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([bookId, memberId])
}

enum MemberRole {
  LEADER
  MEMBER
}

enum AttendanceStatus {
  ATTENDING
  NOT_ATTENDING
  UNDECIDED
}
